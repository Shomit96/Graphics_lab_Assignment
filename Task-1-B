#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include <stdio.h>
#include <stdlib.h>

int X1, Y1, X2, Y2;
int lineWidth;

void initialize() {
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(0, 500, 0, 500);
}

void plotPixel(int x, int y) {
	glBegin(GL_POINTS);
	glVertex2i(x, y);
	glEnd();
}

void plotThickPixel(int cx, int cy, int w) {
	int r = (w - 1) / 2;
	for (int dx = -r; dx <= r; dx++)
		for (int dy = -r; dy <= r; dy++)
			plotPixel(cx + dx, cy + dy);

	if (w % 2 == 0) {
		for (int dx = -r; dx <= r; dx++) { plotPixel(cx + dx, cy + r + 1); plotPixel(cx + dx, cy - r - 1); }
		for (int dy = -r; dy <= r; dy++) { plotPixel(cx + r + 1, cy + dy); plotPixel(cx - r - 1, cy + dy); }
	}
}

void drawLineThick(int xStart, int yStart, int xEnd, int yEnd, int w) {
	int dx = xEnd - xStart;
	int dy = yEnd - yStart;
	int x = xStart, y = yStart;
	int incX = (dx >= 0) ? 1 : -1;
	int incY = (dy >= 0) ? 1 : -1;
	if (dx < 0) dx = -dx;
	if (dy < 0) dy = -dy;

	int e, inc1, inc2;

	if (dx > dy) {
		plotThickPixel(x, y, w);
		e = 2 * dy - dx;
		inc1 = 2 * (dy - dx);
		inc2 = 2 * dy;
		for (int i = 0; i < dx; i++, x += incX) {
			if (e >= 0) { y += incY; e += inc1; }
			else e += inc2;
			plotThickPixel(x, y, w);
		}
	} else {
		plotThickPixel(x, y, w);
		e = 2 * dx - dy;
		inc1 = 2 * (dx - dy);
		inc2 = 2 * dx;
		for (int i = 0; i < dy; i++, y += incY) {
			if (e >= 0) { x += incX; e += inc1; }
			else e += inc2;
			plotThickPixel(x, y, w);
		}
	}
}

void display() {
	glColor3f(1.0, 1.0, 1.0);
	drawLineThick(X1, Y1, X2, Y2, lineWidth);
	glFlush();
}

int main(int argc, char **argv) {
	printf("Enter x1 y1 x2 y2 thickness\n");
	if (scanf("%d %d %d %d %d", &X1, &Y1, &X2, &Y2, &lineWidth) != 5) return 0;
	if (lineWidth < 1) lineWidth = 1;

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("Bresenham Thick Line");
	initialize();
	glutDisplayFunc(display);
	glutMainLoop();
	return 0;
}
